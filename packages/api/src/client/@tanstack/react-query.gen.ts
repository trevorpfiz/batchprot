// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  healthReadRoot,
  analysisRunAnalysis,
  authCheckAuth,
} from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type {
  HealthReadRootData,
  AnalysisRunAnalysisData,
  AnalysisRunAnalysisError,
  AnalysisRunAnalysisResponse,
  AuthCheckAuthData,
} from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const healthReadRootQueryKey = (options?: Options<HealthReadRootData>) =>
  createQueryKey('healthReadRoot', options);

/**
 * Read Root
 */
export const healthReadRootOptions = (
  options?: Options<HealthReadRootData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthReadRoot({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthReadRootQueryKey(options),
  });
};

export const analysisRunAnalysisQueryKey = (
  options: Options<AnalysisRunAnalysisData>
) => createQueryKey('analysisRunAnalysis', options);

/**
 * Run Analysis
 * Run protein analysis on a list of sequences.
 */
export const analysisRunAnalysisOptions = (
  options: Options<AnalysisRunAnalysisData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await analysisRunAnalysis({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: analysisRunAnalysisQueryKey(options),
  });
};

/**
 * Run Analysis
 * Run protein analysis on a list of sequences.
 */
export const analysisRunAnalysisMutation = (
  options?: Partial<Options<AnalysisRunAnalysisData>>
): UseMutationOptions<
  AnalysisRunAnalysisResponse,
  AnalysisRunAnalysisError,
  Options<AnalysisRunAnalysisData>
> => {
  const mutationOptions: UseMutationOptions<
    AnalysisRunAnalysisResponse,
    AnalysisRunAnalysisError,
    Options<AnalysisRunAnalysisData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await analysisRunAnalysis({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authCheckAuthQueryKey = (options?: Options<AuthCheckAuthData>) =>
  createQueryKey('authCheckAuth', options);

/**
 * Check Auth
 * Secured endpoint to check authentication.
 */
export const authCheckAuthOptions = (options?: Options<AuthCheckAuthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authCheckAuth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authCheckAuthQueryKey(options),
  });
};
