// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
  HealthReadRootData,
  HealthReadRootResponses,
  AnalysisRunAnalysisData,
  AnalysisRunAnalysisResponses,
  AnalysisRunAnalysisErrors,
  AuthCheckAuthData,
  AuthCheckAuthResponses,
  AuthCheckAuthErrors,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Read Root
 */
export const healthReadRoot = <ThrowOnError extends boolean = false>(
  options?: Options<HealthReadRootData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthReadRootResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/health',
    ...options,
  });
};

/**
 * Run Analysis
 * Run protein analysis on a list of sequences.
 * Supports both basic and advanced analysis types.
 */
export const analysisRunAnalysis = <ThrowOnError extends boolean = false>(
  options: Options<AnalysisRunAnalysisData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AnalysisRunAnalysisResponses,
    AnalysisRunAnalysisErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/analyze',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Check Auth
 * Secured endpoint to check authentication.
 */
export const authCheckAuth = <ThrowOnError extends boolean = false>(
  options?: Options<AuthCheckAuthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthCheckAuthResponses,
    AuthCheckAuthErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/auth-check',
    ...options,
  });
};
